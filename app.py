# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiV70OkqGh07QxwPc5Q6KHjL7udydbtT
"""

import yt_dlp
import os
import shutil
import streamlit as st

# --- Helper functions ---
def find_video_url(song):
    """Search YouTube for a song and return the first matching video URL"""
    ydl_opts = {"quiet": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        search_result = ydl.extract_info(f"ytsearch5:{song}", download=False)["entries"][0]
        return f"https://www.youtube.com/watch?v={search_result['id']}"

def download_audio(video_url, output_folder):
    """Download audio from YouTube"""
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": f"{output_folder}/%(title)s.%(ext)s",
        "postprocessors": [{"key": "FFmpegExtractAudio", "preferredcodec": "mp3"}],
        "quiet": True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([video_url])

def process_songs(folder_name, song_input):
    folder_name = folder_name.strip()
    download_folder = os.path.join("downloads", folder_name)
    os.makedirs(download_folder, exist_ok=True)

    song_list = [song.strip() for song in song_input.split(",")]
    results = []

    for song in song_list:
        try:
            video_url = find_video_url(song)
            results.append(f"üéµ Best match for *{song}*: {video_url}")
            download_audio(video_url, download_folder)
            results.append(f"‚úÖ Downloaded: {song}")
        except Exception as e:
            results.append(f"‚ùå Error with '{song}': {str(e)}")

    # Zip all files
    zip_path = f"{download_folder}.zip"
    shutil.make_archive(download_folder, "zip", download_folder)

    return "\n".join(results), zip_path

# --- Streamlit UI ---
st.title("üé∂ YouTube Song Downloader")

st.markdown("Enter a folder name and one or more song titles (comma-separated).")

folder_name = st.text_input("Folder Name", "my_music")
song_input = st.text_area("Song Titles (comma-separated)", "Song 1, Song 2")

if st.button("Download Songs"):
    if not song_input.strip():
        st.error("Please enter at least one song title.")
    else:
        with st.spinner("Processing songs..."):
            results, zip_path = process_songs(folder_name, song_input)
            st.success("All downloads finished!")
            st.text(results)

            with open(zip_path, "rb") as f:
                st.download_button("‚¨áÔ∏è Download ZIP", f, file_name=os.path.basename(zip_path))